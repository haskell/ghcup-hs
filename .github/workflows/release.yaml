name: Build and release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build binary
    runs-on: ${{ matrix.os }}
    env:
      CABAL_VER: 3.6.2.0
      CACHE_VER: 1
      MACOSX_DEPLOYMENT_TARGET: 10.13
      JSON_VERSION: "0.0.7"
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            ARTIFACT: "i386-linux-ghcup"
            GHC_VER: 8.10.7
            ARCH: 32
          - os: ubuntu-latest
            ARTIFACT: "x86_64-linux-ghcup"
            GHC_VER: 8.10.7
            ARCH: 64
          - os: [self-hosted, macOS, aarch64]
            ARTIFACT: "aarch64-apple-darwin-ghcup"
            GHC_VER: 9.2.5
            ARCH: ARM64
          - os: macOS-10.15
            ARTIFACT: "x86_64-apple-darwin-ghcup"
            GHC_VER: 9.2.5
            ARCH: 64
          - os: windows-latest
            ARTIFACT: "x86_64-mingw64-ghcup"
            GHC_VER: 8.10.7
            ARCH: 64
            # - os: ubuntu-latest
            #   ARTIFACT: "armv7-linux-ghcup"
            #   GHC_VER: 8.8.4
            #   ARCH: ARM
            # - os: ubuntu-latest
            #   ARTIFACT: "aarch64-linux-ghcup"
            #   GHC_VER: 8.8.4
            #   ARCH: ARM64
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - if: matrix.ARCH == '32' && runner.os == 'Linux'
        name: Run build (32 bit linux)
        uses: docker://i386/alpine:3.12
        with:
          args: sh .github/scripts/build.sh
        env:
          ARTIFACT: ${{ matrix.ARTIFACT }}
          ARCH: ${{ matrix.ARCH }}
          GHC_VER: ${{ matrix.GHC_VER }}
          DISTRO: Alpine
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}

      - if: matrix.ARCH == '64' && runner.os == 'Linux'
        name: Run build (64 bit linux)
        uses: docker://alpine:3.12
        with:
          args: sh .github/scripts/build.sh
        env:
          ARTIFACT: ${{ matrix.ARTIFACT }}
          ARCH: ${{ matrix.ARCH }}
          GHC_VER: ${{ matrix.GHC_VER }}
          DISTRO: Alpine
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}

      - if: matrix.ARCH == 'ARM' && runner.os == 'Linux'
        uses: uraimo/run-on-arch-action@v2
        name: Run build (armv7 linux)
        with:
          arch: armv7
          distro: bullseye
          run: sh .github/scripts/build.sh
          env: |
            ARTIFACT: ${{ matrix.ARTIFACT }}
            ARCH: ${{ matrix.ARCH }}
            GHC_VER: ${{ matrix.GHC_VER }}
            DISTRO: Debian
            CABAL_VER: ${{ env.CABAL_VER }}
            JSON_VERSION: ${{ env.JSON_VERSION }}
            AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
            AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}

      - if: matrix.ARCH == 'ARM64' && runner.os == 'Linux'
        uses: uraimo/run-on-arch-action@v2
        name: Run build (aarch64 linux)
        with:
          arch: aarch64
          distro: bullseye
          run: sh .github/scripts/build.sh
          env: |
            ARTIFACT: ${{ matrix.ARTIFACT }}
            ARCH: ${{ matrix.ARCH }}
            GHC_VER: ${{ matrix.GHC_VER }}
            DISTRO: Debian
            CABAL_VER: ${{ env.CABAL_VER }}
            JSON_VERSION: ${{ env.JSON_VERSION }}
            AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
            AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}

      - if: runner.os != 'Linux'
        name: Run build (windows/mac)
        run: bash .github/scripts/build.sh
        env:
          ARTIFACT: ${{ matrix.ARTIFACT }}
          ARCH: ${{ matrix.ARCH }}
          GHC_VER: ${{ matrix.GHC_VER }}
          DISTRO: na
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          HOMEBREW_CHANGE_ARCH_TO_ARM: 1

      - if: always()
        name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            ./out/*


  test:
    name: Test
    needs: build
    runs-on: ${{ matrix.os }}
    env:
      CABAL_VER: 3.6.2.0
      CACHE_VER: 1
      MACOSX_DEPLOYMENT_TARGET: 10.13
      JSON_VERSION: "0.0.7"
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            ARTIFACT: "i386-linux-ghcup"
            GHC_VER: 8.10.7
            ARCH: 32
            DISTRO: Alpine
          - os: ubuntu-latest
            ARTIFACT: "x86_64-linux-ghcup"
            GHC_VER: 8.10.7
            ARCH: 64
            DISTRO: Alpine
          - os: ubuntu-latest
            ARTIFACT: "x86_64-linux-ghcup"
            GHC_VER: 8.10.7
            ARCH: 64
            DISTRO: Ubuntu
          - os: [self-hosted, macOS, aarch64]
            ARTIFACT: "aarch64-apple-darwin-ghcup"
            GHC_VER: 9.2.5
            ARCH: ARM64
            DISTRO: na
          - os: macOS-10.15
            ARTIFACT: "x86_64-apple-darwin-ghcup"
            GHC_VER: 9.2.5
            ARCH: 64
            DISTRO: na
          - os: windows-latest
            ARTIFACT: "x86_64-mingw64-ghcup"
            GHC_VER: 8.10.7
            ARCH: 64
            DISTRO: na
            # - os: ubuntu-latest
            #   ARTIFACT: "armv7-linux-ghcup"
            #   GHC_VER: 8.8.4
            #   ARCH: ARM
            # - os: ubuntu-latest
            #   ARTIFACT: "aarch64-linux-ghcup"
            #   GHC_VER: 8.8.4
            #   ARCH: ARM64
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: ./out

      - if: matrix.ARCH == '32' && runner.os == 'Linux' && matrix.DISTRO == 'Alpine'
        name: Run test (32 bit linux Alpine)
        uses: docker://i386/alpine:3.12
        with:
          args: sh .github/scripts/test.sh
        env:
          ARTIFACT: ${{ matrix.ARTIFACT }}
          ARCH: ${{ matrix.ARCH }}
          GHC_VER: ${{ matrix.GHC_VER }}
          DISTRO: ${{ matrix.DISTRO }}

      - if: matrix.ARCH == '64' && runner.os == 'Linux' && matrix.DISTRO == 'Alpine'
        name: Run test (64 bit linux Alpine)
        uses: docker://alpine:3.12
        with:
          args: sh .github/scripts/test.sh
        env:
          ARTIFACT: ${{ matrix.ARTIFACT }}
          ARCH: ${{ matrix.ARCH }}
          GHC_VER: ${{ matrix.GHC_VER }}
          DISTRO: ${{ matrix.DISTRO }}

      - if: runner.os == 'Linux' && matrix.DISTRO != 'Alpine'
        name: Run test (64 bit linux)
        run: sh .github/scripts/test.sh
        env:
          ARTIFACT: ${{ matrix.ARTIFACT }}
          ARCH: ${{ matrix.ARCH }}
          GHC_VER: ${{ matrix.GHC_VER }}
          DISTRO: ${{ matrix.DISTRO }}

      - if: matrix.ARCH == 'ARM' && runner.os == 'Linux'
        uses: uraimo/run-on-arch-action@v2
        name: Run test (armv7 linux)
        with:
          arch: armv7
          distro: bullseye
          run: sh .github/scripts/test.sh
          env: |
            ARTIFACT: ${{ matrix.ARTIFACT }}
            ARCH: ${{ matrix.ARCH }}
            GHC_VER: ${{ matrix.GHC_VER }}
            DISTRO: Debian
            CABAL_VER: ${{ env.CABAL_VER }}
            JSON_VERSION: ${{ env.JSON_VERSION }}

      - if: matrix.ARCH == 'ARM64' && runner.os == 'Linux'
        uses: uraimo/run-on-arch-action@v2
        name: Run test (aarch64 linux)
        with:
          arch: aarch64
          distro: bullseye
          run: sh .github/scripts/test.sh
          env: |
            ARTIFACT: ${{ matrix.ARTIFACT }}
            ARCH: ${{ matrix.ARCH }}
            GHC_VER: ${{ matrix.GHC_VER }}
            DISTRO: Debian
            CABAL_VER: ${{ env.CABAL_VER }}
            JSON_VERSION: ${{ env.JSON_VERSION }}

      - if: runner.os != 'Linux'
        name: Run test (windows/mac)
        run: bash .github/scripts/test.sh
        env:
          ARTIFACT: ${{ matrix.ARTIFACT }}
          ARCH: ${{ matrix.ARCH }}
          GHC_VER: ${{ matrix.GHC_VER }}
          DISTRO: ${{ matrix.DISTRO }}
          HOMEBREW_CHANGE_ARCH_TO_ARM: 1
  hls:
    name: hls
    needs: build
    runs-on: ubuntu-latest
    env:
      GHC_VERSION: "8.10.7"
      HLS_TARGET_VERSION: "1.8.0.0"
      CABAL_VERSION: "3.6.2.0"
      JSON_VERSION: "0.0.7"
      ARTIFACT: "x86_64-linux-ghcup"
      DISTRO: Ubuntu
      ARCH: 64
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: ./out

      - name: Run hls build
        run: sh .github/scripts/hls.sh

  release:
    name: release
    needs: [build, test, hls]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: ./out

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            ./out/*
